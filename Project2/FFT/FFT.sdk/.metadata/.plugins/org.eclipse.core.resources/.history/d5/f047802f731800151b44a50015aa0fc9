/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* XILINX CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include <xil_io.h>
#include "xparameters.h"
#include "xscugic.h"
#include "xaxidma.h"
#define TIMER_COUNTER_0 0
#define SIZE  4096
// first DMA for HP port
XAxiDma AxiDma;
/////////////////////////////////////////////////
//
//     initialize first DMA function
//
/////////////////////////////////////////////////
int init_dma(){
	XAxiDma_Config *CfgPtr;
	int status;

	CfgPtr = XAxiDma_LookupConfig(XPAR_AXI_DMA_0_DEVICE_ID);
	if(!CfgPtr){
		print("Error looking for AXI DMA config\n\r");
		return XST_FAILURE;
	}
	status = XAxiDma_CfgInitialize(&AxiDma,CfgPtr);
	if(status != XST_SUCCESS){
		print("Error initializing DMA 0\n\r");
		return XST_FAILURE;
	}
	//check for scatter gather mode
	if(XAxiDma_HasSg(&AxiDma)){
		print("Error DMA configured in SG mode\n\r");
		return XST_FAILURE;
	}
	/* Disable interrupts, we use polling mode */
	XAxiDma_IntrDisable(&AxiDma, XAXIDMA_IRQ_ALL_MASK,XAXIDMA_DEVICE_TO_DMA);
	XAxiDma_IntrDisable(&AxiDma, XAXIDMA_IRQ_ALL_MASK,XAXIDMA_DMA_TO_DEVICE);

	return XST_SUCCESS;
}

int main()
{
	int status;
	int temp,i,j;
	int k = 0;
	static int Result1[SIZE];
    init_platform();

    //  Initialize dma
    init_dma();
    //get data from the PL block to DDR Ram
    status = XAxiDma_SimpleTransfer(&AxiDma, 0xa000000, 1024,XAXIDMA_DEVICE_TO_DMA);// the number here limits the max transfer


    /* Wait for transfer to be done */
    while(XAxiDma_Busy(&AxiDma, XAXIDMA_DEVICE_TO_DMA));
    j=0;
    // read data from DDR ram to variable Result1
   /* for(i=0;i<=4*1023;i+=4)
    	{
    	  Result1[j] = Xil_In32(0xa000000+i);
    	  j+=1;
    	}
    */
    for(i=0;i<=4*1024;i+=4)
       	{
       	  Result1[j] = Xil_In32(0xa000000+i);
       	  j+=1;
       	}

    j=0;
    // rad data from DDR ram to UART
	/*for(i=0;i<=1023;i+=1)
	{
		temp = Xil_In32(0xa000000+j);
		xil_printf("DDR address 0x%x",0xa0000000+j);
		xil_printf(" contains %d\n\r",Result1[i]);
		j+=4;
	}*/

    for(i=0;i<=1024;i+=1)
    	{
    		temp = Xil_In32(0xa000000+j);
    		xil_printf("DDR address 0x%x",0xa0000000+j);
    		xil_printf(" contains %d\n\r",Result1[i]);
    		j+=4;
    	}

/*
    for(i=0;i<=1023;i+=1)
    	{
    		k++;
    		temp = Xil_In32(0xa000000+j);
    		//xil_printf("%d, %d",0xa0000000+j);
    		xil_printf(" X(%d)=%d + %d\n\r", k, (short)Result1[i], (short)(Result1[i] >> 16));




    		j+=4;
    	}

*/
    return 0;
}
